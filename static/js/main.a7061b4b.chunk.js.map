{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","newStyle","highlight","color","fontSize","textShadow","react_default","a","createElement","className","style","onClick","clickFn","value","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","squares","Array","fill","xIsNext","blinkStatus","turns","handleReset","bind","assertThisInitialized","showStatus","lines","i","length","_lines$i","slicedToArray","b","c","slice","calculateWinner","setState","toHighlight","_this2","winningLine","squaresSet","_loop","push","src_Square_0","key","handleClick","prevState","setInterval","status","winningNums","renderSquares","React","Component","App","src_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a7061b4b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = props => {\r\n\r\n\t\tlet newStyle;\r\n\r\n\t\tif (props.highlight) {\t\t\r\n\t\t\tnewStyle = { color : \"#AA0820\",\r\n\t\t\t\t\t\t fontSize : \"4em\", \r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t textShadow: \"1px 1px 2px red, 0 0 1em blue, 0 0 0.2em #25507F\"} \r\n\r\n\t\t} else { \r\n\t\t\tnewStyle = { color : \"white\" }\r\n\t\t  }\r\n\t\t\t\t\r\n\t\t\t\r\n    \treturn (\r\n\t   \r\n\t      <button className=\"square\" \r\n\t      \t\t  style= {newStyle} \r\n\t      \t\t  onClick={props.clickFn} >\r\n\t     \t\t  {props.value} \r\n\t      </button>\r\n\t   \r\n\t    );\r\n\t\r\n}\r\n\r\n\r\nexport default Square; \r\n \r\n","import React from 'react';\r\nimport './board.css';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component  {\r\n\r\n\tconstructor(props) {\r\n\t    \r\n \t\tsuper(props);\r\n\t    this.state = {\r\n\t      squares: Array(9).fill(null),\r\n\t      xIsNext: true,\r\n\t      blinkStatus : true,\r\n\t      turns: 0,\r\n\t    };\r\n\r\n\t    this.handleReset = this.handleReset.bind(this);\r\n\t    this.showStatus = this.showStatus.bind(this);\r\n\t}\r\n\r\n\r\n\r\n\tcalculateWinner(squares) {\r\n\t\t\r\n\t  const lines = [\r\n\t    [0, 1, 2],\r\n\t    [3, 4, 5],\r\n\t    [6, 7, 8],\r\n\t    [0, 3, 6],\r\n\t    [1, 4, 7],\r\n\t    [2, 5, 8],\r\n\t    [0, 4, 8],\r\n\t    [2, 4, 6],\r\n\t  ];\r\n\t  for (let i = 0; i < lines.length; i++) {\r\n\t    const [a, b, c] = lines[i];\r\n\t    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t      \r\n\t      return lines[i];\r\n\t    }\r\n\t  }\r\n\t  return null;\r\n\t}\r\n\r\n\r\n\r\n\thandleClick(i) {\r\n\r\n\t    const squares = this.state.squares.slice();\r\n   \t\tconst winningLine = this.calculateWinner(squares); \r\n   \t\t\r\n   \t\tif (winningLine || squares[i] || this.state.turns > 9) return;\r\n    \t\t    \r\n\r\n\t\tconst turns = this.state.turns + 1;\r\n\t    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\t    \r\n\t    this.setState({\tsquares: squares, \r\n\t    \t\t\t\txIsNext: !this.state.xIsNext,\r\n\t    \t\t\t\tblinkStatus : true,\r\n\t    \t\t\t\tturns: turns, });\r\n \t}\r\n\r\n\t\r\n\t\r\n  \trenderSquares() {\r\n\r\n   \t\tconst winningLine = this.calculateWinner(this.state.squares); \r\n\r\n  \t\tlet squaresSet = [];\r\n  \t\tlet toHighlight;\r\n\r\n\t\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\t\tif (winningLine) {\r\n\t\t\t\t\ttoHighlight =  i == winningLine[0]  || \r\n\t\t\t\t\t\t\t\t   i == winningLine[1]  ||\r\n\t\t\t\t\t\t\t\t   i == winningLine[2]  ;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsquaresSet.push(<Square key={i}\r\n    \t\t\t\t   \t\t\t\t\tvalue={this.state.squares[i]} \r\n    \t\t\t\t\t\t\t\t\tclickFn={() => this.handleClick(i)}\r\n    \t\t\t\t\t\t\t\t\thighlight={toHighlight}/>);\r\n\t\t\t} \r\n\r\n\t\treturn squaresSet;\t\t\r\n\r\n  \t}\r\n\r\n    \r\n  \tshowStatus() {\r\n\r\n  \t\tthis.setState((prevState) => {\r\n      \t\treturn { \r\n        \t\t\r\n        \t\tblinkStatus : !prevState.blinkStatus,\r\n        \t\tsquares : prevState.squares, \r\n\t    \t\txIsNext : prevState.xIsNext,\r\n\t    \t\tturns :\tprevState.turns,\r\n     \t\t }\r\n    \t});\r\n  \t}\r\n\r\n    componentDidMount() {\r\n    \t\r\n    \tsetInterval(this.showStatus, 250);\r\n    \t\r\n    }\r\n\r\n    \r\n\r\n  \thandleReset() {\r\n\t\t\r\n  \t\tthis.setState({\tsquares: Array(9).fill(null), \r\n\t    \t\t\t\txIsNext: true,\r\n\t    \t\t\t\tturns : 0, });\r\n  \t\t\r\n \t}\r\n\r\n\r\n  \trender() {\r\n\r\n\t   let status;\r\n\t   \r\n\t   const winningNums = this.calculateWinner(this.state.squares);\r\n\t   \r\n\t   if (winningNums) {\r\n\t      status =  this.state.squares[winningNums[0]] + ' WINS!';\r\n\t      \r\n\r\n\t    } else if (this.state.turns > 8) {\r\n\t\t\tstatus = \"it's a tie!\";\r\n\t      }\r\n\r\n\t      else {\r\n\t      \tstatus = this.state.blinkStatus ? \r\n\t      \t\t\t('Next player: ' + (this.state.xIsNext ? 'X' : 'O')) : \"\";\r\n\t     }\r\n\t\t\r\n\t   \r\n\r\n\t   return (\r\n\t      \r\n\t   \t\t<div>\r\n\r\n\t\t   \t\t<div>\r\n\t\t     \t\t<h1 className=\"title\">Tic Tac Toe</h1>\r\n\t\t    \t</div>\r\n\r\n\t\t    \t<div>\r\n\t\t\t     \r\n\t\t\t    \t<button className=\"resetBtn\" \r\n\t\t\t      \t\t  onClick={this.handleReset}> Reset </button>\r\n\r\n\t\t\t    \t<div className=\"container\"> {this.renderSquares()} </div>\r\n\r\n\t\t\t    \t<div className={winningNums ? \"gameEnd\" : \"next\"}> {status} </div>\r\n\r\n\t    \t\t</div> \r\n\t    \t\t\r\n\t    \t</div>\r\n\r\n\r\n    \t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Board; \r\n","import React from 'react';\nimport './App.css';\nimport Board from './Board';\nimport Game from './Game';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n\n  }\n\n  render() {\n     \n    return (\n      <div>\n      \n        <Board/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n\t\n\n\t<App />\n\n\n\n\t\t\n\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}